{"version":3,"sources":["components/Autosuggestion/Autosuggestion.js","components/CardClock/CardClock.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","Autosuggestion","props","state","listItem","showSuggestion","onLocationNameHandler","this","type","className","placeholder","onChange","event","setState","target","value","filter","filterItem","includes","map","mapItem","key","Component","CardClock","spacetime","now","format","location","particleOptions","particles","number","density","enable","value_area","color","line_linked","shadow","blur","initialState","locName","cards","App","loc","onAddClockClick","console","log","cardArray","concat","params","onClick","card","i","split","join","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAGMA,G,MAAc,CAClB,CAAEC,MAAO,eACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,WACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,UACT,CAAEA,MAAO,YACT,CAAEA,MAAO,cACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,aACT,CAAEA,MAAO,WACT,CAAEA,MAAO,SACT,CAAEA,MAAO,aACT,CAAEA,MAAO,WACT,CAAEA,MAAO,cACT,CAAEA,MAAO,WACT,CAAEA,MAAO,WACT,CAAEA,MAAO,cACT,CAAEA,MAAO,YACT,CAAEA,MAAO,WACT,CAAEA,MAAO,WACT,CAAEA,MAAO,UACT,CAAEA,MAAO,SACT,CAAEA,MAAO,WACT,CAAEA,MAAO,UACT,CAAEA,MAAO,mCACT,CAAEA,MAAO,oCACT,CAAEA,MAAO,0BACT,CAAEA,MAAO,YACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,kCACT,CAAEA,MAAO,uBA4CIC,E,YAvCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,GACVC,gBAAgB,GAJD,E,sEAQT,IAAD,OACCC,EAA0BC,KAAKL,MAA/BI,sBADD,EAE8BC,KAAKJ,MAAlCC,EAFD,EAECA,SAAUC,EAFX,EAEWA,eAClB,OACI,kBAAC,WAAD,KACE,2BAAOG,KAAK,OACZC,UAAU,YACVC,YAAY,yBACZC,SAAW,SAACC,GAAiF,OAArE,EAAKC,SAAS,CAACT,SAAUQ,EAAME,OAAOC,MAAOV,gBAAgB,IAAeC,EAAsBM,EAAME,OAAOC,WAElH,IAAnBV,GAAwC,KAAbD,EACzB,yBAAKK,UAAU,8BACb,6BAEEV,EAAYiB,QAAO,SAACC,GAClB,OAAOA,EAAWjB,MAAMkB,SAASd,MAChCe,KAAI,SAACC,GACN,OACE,0BAAMC,IAAMD,EAAQpB,MAASS,UAAYJ,EAAiB,WAAa,MAASe,EAAQpB,YAMhG,U,GAlCesB,a,gBC3BdC,G,MATG,SAACrB,GAClB,OACC,yBAAKO,UAAU,2BACd,4BAAMe,IAAUC,MAAMC,OAAO,SAC7B,4BAAMxB,EAAMyB,aCFTC,G,MAAkB,CACtBC,UAAW,CACTC,OAAQ,CACNf,MAAO,GACPgB,QAAS,CACPC,QAAQ,EACRC,WAAY,KAEhBC,MAAO,CACHnB,MAAO,WAEXoB,YAAa,CACGC,OAAQ,CACNJ,QAAQ,EACRE,MAAO,UACPG,KAAM,QAOtBC,EAAe,CACnBC,QAAS,GACTC,MAAO,IA0CMC,E,YAtCb,aAAe,IAAD,8BACZ,+CAIFnC,sBAAwB,SAACoC,GACvB,EAAK7B,SAAS,CAAC0B,QAASG,KANZ,EAWdC,gBAAkB,WAChBC,QAAQC,IAAI,eAAgB,EAAK1C,MAAMoC,SACvC,IAAIO,EAAY,EAAK3C,MAAMqC,MAAMO,OAAO,EAAK5C,MAAMoC,SACnD,EAAK1B,SAAS,CAAC2B,MAAOM,KAZtB,EAAK3C,MAAQmC,EAFD,E,sEAiBJ,IACAE,EAAUjC,KAAKJ,MAAfqC,MACR,OACE,yBAAK/B,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAYuC,OAASpB,IAC1C,yBAAKnB,UAAU,UACb,kBAAC,EAAD,CAAgBH,sBAAwBC,KAAKD,wBAC7C,4BAAQG,UAAU,OAAOwC,QAAU1C,KAAKoC,iBAAxC,cAEF,yBAAKlC,UAAU,YAEb+B,EAAMrB,KAAK,SAAC+B,EAAMC,GACZ,OAAQ,kBAAC,EAAD,CAAW9B,IAAM6B,EAAKE,MAAM,KAAKC,KAAK,IAAIN,OAAOI,EAAE,GAAKxB,SAAWuB,a,GA9BzE5B,aCrBEgC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0861a1e.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './Autosuggestion.css';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nclass Autosuggestion extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listItem: '',\r\n      showSuggestion: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { onLocationNameHandler } = this.props;\r\n    const { listItem, showSuggestion } = this.state;\r\n    return (\r\n        <Fragment>\r\n          <input type='text' \r\n          className='inputText' \r\n          placeholder='Enter location name...' \r\n          onChange={ (event) => { this.setState({listItem: event.target.value, showSuggestion: true}); return onLocationNameHandler(event.target.value) } }/>         \r\n          { \r\n            showSuggestion === true && listItem !== '' ? \r\n              <div className='autosuggestion suggestions'>\r\n                <div>\r\n                {\r\n                  suggestions.filter((filterItem) => {\r\n                    return filterItem.label.includes(listItem)\r\n                  }).map((mapItem) => {\r\n                    return (\r\n                      <span key={ mapItem.label }  className={ showSuggestion ? \"showlist\" : null }>{ mapItem.label }</span>\r\n                    )\r\n                  })\r\n                }\r\n                </div>\r\n              </div>\r\n            : null            \r\n          }   \r\n        </Fragment>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Autosuggestion;","import React from 'react';\r\nimport spacetime from 'spacetime';\r\nimport './CardClock.css';\r\n\r\nconst CardClock = (props) => {\r\n\treturn (\r\n\t\t<div className='w3-card-4 w3-padding-64'>\r\n\t\t\t<h3>{ spacetime.now().format('nice') }</h3>\r\n\t\t\t<h4>{ props.location }</h4>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardClock;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Autosuggestion from './components/Autosuggestion/Autosuggestion';\r\nimport CardClock from './components/CardClock/CardClock';\r\nimport './App.css';\r\n\r\nconst particleOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 50,\r\n      density: {\r\n        enable: true,\r\n        value_area: 200\r\n      },\r\n    color: {\r\n        value: \"#000000\"\r\n      },\r\n    line_linked: {\r\n                    shadow: {\r\n                      enable: true,\r\n                      color: \"#888888\",\r\n                      blur: 5\r\n                    }\r\n                  }\r\n    }\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  locName: '',\r\n  cards: [],\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  onLocationNameHandler = (loc) => {\r\n    this.setState({locName: loc});\r\n    // document.getElementById('listing').classList.add('showlist');\r\n\r\n  };\r\n\r\n  onAddClockClick = () => {\r\n    console.log('Adding Clock', this.state.locName);\r\n    let cardArray = this.state.cards.concat(this.state.locName);\r\n    this.setState({cards: cardArray});\r\n  };\r\n\r\n  render() {\r\n    const { cards } = this.state;\r\n    return (\r\n      <div className='App'>\r\n        <Particles className='particles' params={ particleOptions }/>\r\n        <div className='parent'>\r\n          <Autosuggestion onLocationNameHandler={ this.onLocationNameHandler }/>\r\n          <button className='butn' onClick={ this.onAddClockClick }>Add Clock</button>\r\n        </div>\r\n        <div className='cardList'>\r\n          {\r\n          cards.map( (card, i) => {\r\n                return (<CardClock key={ card.split(' ').join('').concat(i+1) } location={ card } />);\r\n              })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\nSign In page\r\nSign Out page\r\nRegister page\r\nA Card for showing Date and Time and timezone\r\n  A refresh button - based on this a API fetch is made\r\n  A time counter maybe?\r\n    --> Auto increment after initial API fetch on login\r\nSearch Bar - Auto Complete\r\n  Get latitude and longitudes\r\nCurrent City and Time\r\n  Get GPS coordinates\r\n*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}