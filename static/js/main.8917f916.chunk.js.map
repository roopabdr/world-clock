{"version":3,"sources":["components/Autosuggestion.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","renderInputComponent","inputProps","classes","_inputProps$inputRef","inputRef","ref","other","Object","objectWithoutProperties","react_default","a","createElement","className","style","width","TextField_default","assign","fullWidth","InputProps","node","input","renderSuggestion","suggestion","_ref","query","isHighlighted","matches","match","parts","parse","MenuItem_default","selected","component","map","part","index","highlight","key","String","fontWeight","text","getSuggestions","value","inputValue","deburr","trim","toLowerCase","inputLength","length","count","filter","keep","slice","getSuggestionValue","Autosuggestion","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSuggestionsFetchRequested","_ref2","setState","handleSuggestionsClearRequested","handleChange","name","event","_ref3","newValue","defineProperty","state","single","popper","_this2","props","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","dist_default","placeholder","onChange","popperNode","InputLabelProps","shrink","theme","suggestionsList","renderSuggestionsContainer","options","Popper_default","anchorEl","open","Boolean","children","Paper_default","square","containerProps","clientWidth","Component","withStyles","_input","root","height","flexGrow","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","unit","left","right","display","margin","padding","listStyleType","divider","textField","marginLeft","marginRight","paddingBottom","color","lineHeight","particleOptions","particles","number","density","enable","value_area","line_linked","shadow","blur","App","particles_default","params","components_Autosuggestion","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8917f916.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInputComponent(inputProps) {\r\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <div className='center'>\r\n    <div style={{width: '65%'}}>\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputRef: node => {\r\n          ref(node);\r\n          inputRef(node);\r\n        },\r\n        classes: {\r\n          input: classes.input,\r\n        },\r\n      }}\r\n      {...other}\r\n    />\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n  const matches = match(suggestion.label, query);\r\n  const parts = parse(suggestion.label, matches);\r\n\r\n  return (\r\n    <MenuItem selected={isHighlighted} component=\"div\">\r\n      <div>\r\n        {parts.map((part, index) =>\r\n          part.highlight ? (\r\n            <span key={String(index)} style={{ fontWeight: 500 }}>\r\n              {part.text}\r\n            </span>\r\n          ) : (\r\n            <strong key={String(index)} style={{ fontWeight: 300 }}>\r\n              {part.text}\r\n            </strong>\r\n          ),\r\n        )}\r\n      </div>\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion.label;\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    height: 250,\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  suggestionsContainerOpen: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing.unit,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  suggestion: {\r\n    display: 'block',\r\n  },\r\n  suggestionsList: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyleType: 'none',\r\n  },\r\n  divider: {\r\n    height: theme.spacing.unit * 2,\r\n  },\r\n  textField: {\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',            \r\n    paddingBottom: 0,\r\n    marginTop: 0,\r\n    fontWeight: 500\r\n  },\r\n    input: {\r\n\t  margin: 10,\r\n\t  color: 'inherit',\r\n\t  fontWeight: 'inherit',\r\n\t  lineHeight: '10px',\r\n    padding: '15px 22px',\r\n    margin: '10px 5px',\r\n    boxSizing: 'border-box',\r\n    background: 'white'\r\n    }\r\n});\r\n\r\nclass Autosuggestion extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsingle: '',\r\n    \t\tpopper: '',\r\n    \t\tsuggestions: [],\r\n\t\t};\r\n\t}\r\n\r\n\thandleSuggestionsFetchRequested = ({ value }) => {\r\n\t    this.setState({\r\n\t      suggestions: getSuggestions(value),\r\n\t    });\r\n\t};\r\n\r\n\thandleSuggestionsClearRequested = () => {\r\n\t   this.setState({\r\n\t     suggestions: [],\r\n\t   });\r\n\t};\r\n\r\n\thandleChange = name => (event, { newValue }) => {\r\n\t  this.setState({\r\n\t    [name]: newValue,\r\n\t  });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\tconst autosuggestProps = {\r\n\t      renderInputComponent,\r\n\t      suggestions: this.state.suggestions,\r\n\t      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\r\n\t      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\r\n\t      getSuggestionValue,\r\n\t      renderSuggestion,\r\n\t    };\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Autosuggest\r\n\t\t\t          {...autosuggestProps}\r\n\t\t\t          inputProps={{\r\n\t\t\t            classes,\r\n\t\t\t            placeholder: 'Enter a name of a place...',\r\n\t\t\t            value: this.state.popper,\r\n\t\t\t            onChange: this.handleChange('popper'),\r\n\t\t\t            inputRef: node => {\r\n\t\t\t              this.popperNode = node;\r\n\t\t\t            },\r\n\t\t\t            InputLabelProps: {\r\n\t\t\t              shrink: true,\r\n\t\t\t            },\r\n\t\t\t          }}\r\n\t\t\t          theme={{\r\n\t\t\t            suggestionsList: classes.suggestionsList,\r\n\t\t\t            suggestion: classes.suggestion,\r\n\t\t\t          }}\r\n\t\t\t          renderSuggestionsContainer={options => (\r\n\t\t\t            <Popper anchorEl={this.popperNode} open={Boolean(options.children)}>\r\n\t\t\t              <Paper\r\n\t\t\t                square\r\n\t\t\t                {...options.containerProps}\r\n\t\t\t                style={{ width: this.popperNode ? this.popperNode.clientWidth : null }}\r\n\t\t\t              >\r\n\t\t\t                {options.children}\r\n\t\t\t              </Paper>\r\n\t\t\t            </Popper>\r\n\t\t\t          )}\r\n        \t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nAutosuggestion.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Autosuggestion);","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Autosuggestion from './components/Autosuggestion';\nimport './App.css';\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 200\n      },\n    line_linked: {\n                    shadow: {\n                      enable: true,\n                      color: \"#3CA9D1\",\n                      blur: 5\n                    }\n                  }\n    }\n  }\n};\n\nclass App extends Component {  \n  render() {\n    return (\n      <div className='App'>\n        <Particles className='particles' params={particleOptions}/>\n        <Autosuggestion />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\nSign In page\nSign Out page\nRegister page\nA Card for showing Date and Time and timezone\n  A refresh button - based on this a API fetch is made\n  A time counter maybe?\n    --> Auto increment after initial API fetch on login\nSearch Bar - Auto Complete\n  Get latitude and longitudes\nCurrent City and Time\n  Get GPS coordinates\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}