{"version":3,"sources":["components/Autosuggestion/Autosuggestion.js","components/CardClock/CardClock.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","Autosuggestion","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listItem","showSuggestion","_this2","onLocationNameHandler","_this$state","react_default","a","createElement","react","type","className","placeholder","onChange","event","setState","target","value","filter","filterItem","includes","map","mapItem","key","Component","CardClock","spacetime","now","format","location","particleOptions","particles","number","density","enable","value_area","color","line_linked","shadow","blur","initialState","locName","cards","App","loc","onAddClockClick","console","log","cardArray","concat","particles_default","params","components_Autosuggestion_Autosuggestion","onClick","card","i","components_CardClock_CardClock","split","join","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1d56a74.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './Autosuggestion.css';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nclass Autosuggestion extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listItem: '',\r\n      showSuggestion: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { onLocationNameHandler } = this.props;\r\n    const { listItem, showSuggestion } = this.state;\r\n    return (\r\n        <Fragment>\r\n          \r\n          <input type='text' \r\n          className='inputText' \r\n          placeholder='Enter location name...' \r\n          onChange={ (event) => { this.setState({listItem: event.target.value, showSuggestion: true}); return onLocationNameHandler(event.target.value) } }/>\r\n          {/* <div className='autosuggestion'>\r\n          <ul id='listing' className='suggestions'>\r\n            <li>one</li>\r\n            <li>two</li>\r\n            <li>three</li>\r\n            <li>four</li>\r\n            <li>five</li>\r\n            <li>six</li>\r\n            <li>seven</li>\r\n            <li>eight</li>\r\n            <li>nine</li>\r\n            <li>ten</li>\r\n          </ul>\r\n          </div> */}\r\n          { \r\n            showSuggestion === true && listItem !== '' ? \r\n              <div className='autosuggestion suggestions'>\r\n              <ul className={ showSuggestion ? \"showlist\" : null }>\r\n              {\r\n                suggestions.filter((filterItem) => {\r\n                  return filterItem.label.includes(listItem)\r\n                }).map((mapItem) => {\r\n                  return (\r\n                    <li key={ mapItem.label }>{ mapItem.label }</li>\r\n                  )\r\n                })\r\n              }\r\n              </ul>\r\n              </div>\r\n            : null            \r\n          }   \r\n        </Fragment>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Autosuggestion;","import React from 'react';\r\nimport spacetime from 'spacetime';\r\nimport './CardClock.css';\r\n\r\nconst CardClock = (props) => {\r\n\treturn (\r\n\t\t<div className='w3-card-4 w3-padding-64'>\r\n\t\t\t<h3>{ spacetime.now().format('nice') }</h3>\r\n\t\t\t<h4>{ props.location }</h4>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardClock;","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Autosuggestion from './components/Autosuggestion/Autosuggestion';\nimport CardClock from './components/CardClock/CardClock';\nimport './App.css';\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 200\n      },\n    color: {\n        value: \"#000000\"\n      },\n    line_linked: {\n                    shadow: {\n                      enable: true,\n                      color: \"#888888\",\n                      blur: 5\n                    }\n                  }\n    }\n  }\n};\n\nconst initialState = {\n  locName: '',\n  cards: [],\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  onLocationNameHandler = (loc) => {\n    this.setState({locName: loc});\n    // document.getElementById('listing').classList.add('showlist');\n\n  };\n\n  onAddClockClick = () => {\n    console.log('Adding Clock', this.state.locName);\n    let cardArray = this.state.cards.concat(this.state.locName);\n    this.setState({cards: cardArray});\n  };\n\n  render() {\n    const { cards } = this.state;\n    return (\n      <div className='App'>\n        <Particles className='particles' params={ particleOptions }/>\n        {/* <div className='autosuggestion center'> */}\n          <Autosuggestion onLocationNameHandler={ this.onLocationNameHandler }/>\n          <button className='butn' onClick={ this.onAddClockClick }>Add Clock</button>\n        {/* </div> */}\n        <div className='cardList'>\n          {\n          cards.map( (card, i) => {\n                return (<CardClock key={ card.split(' ').join('').concat(i+1) } location={ card } />);\n              })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\nSign In page\nSign Out page\nRegister page\nA Card for showing Date and Time and timezone\n  A refresh button - based on this a API fetch is made\n  A time counter maybe?\n    --> Auto increment after initial API fetch on login\nSearch Bar - Auto Complete\n  Get latitude and longitudes\nCurrent City and Time\n  Get GPS coordinates\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}