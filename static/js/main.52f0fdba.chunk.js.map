{"version":3,"sources":["components/Autosuggestion/Autosuggestion.js","components/CardClock/CardClock.js","App.js","serviceWorker.js","index.js"],"names":["Autosuggestion","props","react_default","a","createElement","className","type","placeholder","onChange","event","onLocationNameHandler","target","value","CardClock","spacetime","now","format","location","particleOptions","particles","number","density","enable","value_area","color","line_linked","shadow","blur","initialState","locName","cards","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loc","setState","onAddClockClick","console","log","state","cardArray","concat","particles_default","params","components_Autosuggestion_Autosuggestion","onClick","map","card","i","components_CardClock_CardClock","key","split","join","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAmDeA,SAXQ,SAACC,GACtB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACZD,UAAU,YACVE,YAAY,yBACZC,SAAW,SAACC,GAAD,OAAWR,EAAMS,sBAAsBD,EAAME,OAAOC,6BCjCxDC,SATG,SAACZ,GAClB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACdH,EAAAC,EAAAC,cAAA,UAAMU,IAAUC,MAAMC,OAAO,SAC7Bd,EAAAC,EAAAC,cAAA,UAAMH,EAAMgB,aCFTC,SAAkB,CACtBC,UAAW,CACTC,OAAQ,CACNR,MAAO,GACPS,QAAS,CACPC,QAAQ,EACRC,WAAY,KAEhBC,MAAO,CACHZ,MAAO,WAEXa,YAAa,CACGC,OAAQ,CACNJ,QAAQ,EACRE,MAAO,UACPG,KAAM,QAOtBC,EAAe,CACnBC,QAAS,GACTC,MAAO,IAsCMC,cAlCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAIFzB,sBAAwB,SAAC6B,GACvBP,EAAKQ,SAAS,CAACX,QAASU,KANZP,EASdS,gBAAkB,WAChBC,QAAQC,IAAI,eAAgBX,EAAKY,MAAMf,SACvC,IAAIgB,EAAYb,EAAKY,MAAMd,MAAMgB,OAAOd,EAAKY,MAAMf,SACnDG,EAAKQ,SAAS,CAACV,MAAOe,KAVtBb,EAAKY,MAAQhB,EAFDI,wEAeL,IACCF,EAAUK,KAAKS,MAAfd,MACR,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,CAAWE,UAAU,YAAY2C,OAAS9B,IAC1ChB,EAAAC,EAAAC,cAAC6C,EAAD,CAAgBvC,sBAAwByB,KAAKzB,wBAC7CR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAO6C,QAAUf,KAAKM,iBAAxC,aACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEbyB,EAAMqB,IAAK,SAACC,EAAMC,GACZ,OAAQnD,EAAAC,EAAAC,cAACkD,EAAD,CAAWC,IAAMH,EAAKI,MAAM,KAAKC,KAAK,IAAIX,OAAOO,EAAE,GAAKpC,SAAWmC,eA1BzEM,aCrBEC,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52f0fdba.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Autosuggestion.css';\r\n\r\n/*const suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];*/\r\n\r\nconst Autosuggestion = (props) => {\r\n  return (\r\n\t\t\t<div className='autoSuggestion'>\r\n        <input type='text' \r\n        className='inputText' \r\n        placeholder='Enter location name...' \r\n        onChange={ (event) => props.onLocationNameHandler(event.target.value) }/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Autosuggestion;","import React from 'react';\r\nimport spacetime from 'spacetime';\r\nimport './CardClock.css';\r\n\r\nconst CardClock = (props) => {\r\n\treturn (\r\n\t\t<div className='w3-card-4 w3-padding-64'>\r\n\t\t\t<h3>{ spacetime.now().format('nice') }</h3>\r\n\t\t\t<h4>{ props.location }</h4>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardClock;","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Autosuggestion from './components/Autosuggestion/Autosuggestion';\nimport CardClock from './components/CardClock/CardClock';\nimport './App.css';\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 200\n      },\n    color: {\n        value: \"#000000\"\n      },\n    line_linked: {\n                    shadow: {\n                      enable: true,\n                      color: \"#888888\",\n                      blur: 5\n                    }\n                  }\n    }\n  }\n};\n\nconst initialState = {\n  locName: '',\n  cards: [],\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  onLocationNameHandler = (loc) => {\n    this.setState({locName: loc});\n  };\n\n  onAddClockClick = () => {\n    console.log('Adding Clock', this.state.locName);\n    let cardArray = this.state.cards.concat(this.state.locName);\n    this.setState({cards: cardArray});\n  };\n\n  render() {\n    const { cards } = this.state;\n    return (\n      <div className='App'>\n        <Particles className='particles' params={ particleOptions }/>\n        <Autosuggestion onLocationNameHandler={ this.onLocationNameHandler }/>\n        <button className='butn' onClick={ this.onAddClockClick }>Add Clock</button>\n        <div className='cardList'>\n          {\n          cards.map( (card, i) => {\n                return (<CardClock key={ card.split(' ').join('').concat(i+1) } location={ card } />);\n              })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/*\nSign In page\nSign Out page\nRegister page\nA Card for showing Date and Time and timezone\n  A refresh button - based on this a API fetch is made\n  A time counter maybe?\n    --> Auto increment after initial API fetch on login\nSearch Bar - Auto Complete\n  Get latitude and longitudes\nCurrent City and Time\n  Get GPS coordinates\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}